{"version":3,"sources":["components/Footer.js","utils/scoreboard.js","components/TablaTotales.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","footer","borderTop","padding","textAlign","backgroundColor","color","Footer","classes","className","variant","Date","getFullYear","sacarPuntos","value","number","parseInt","split","isNaN","err","TablaTotales","useState","sheetLoaded","setSheetLoaded","totales","setTotales","useEffect","Promise","resolve","Tabletop","init","key","callback","googleData","simpleSheet","then","rows","equipos","Object","values","forEach","row","ronda","categoria","equipo","puntos","i","getTotales","console","log","theme","title","flexGrow","root","minHeight","margin","marginBottom","palette","primary","lime","secondary","lightBlue","status","danger","App","ThemeProvider","createMuiTheme","AppBar","position","elevation","Toolbar","data-testid","Grid","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8YAGMA,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,UAAU,iCACVC,QAAS,QACTC,UAAW,SACXC,gBAAiB,UACjBC,MAAO,aAmBIC,EAfA,WACb,IAAMC,EAAUT,IAEhB,OACE,4BAAQU,UAAWD,EAAQP,QACzB,wBAAIS,QAAQ,SAAZ,YAEG,IAAIC,MAAOC,cAFd,Y,2BCkCAC,EAAc,SAAAC,GAClB,IACE,IAAMC,EAASC,SAASF,EAAMG,MAAM,KAAK,GAAGA,MAAM,KAAK,IACvD,OAAOC,MAAMH,GAAU,EAAIA,EAC3B,MAAOI,GACP,OAAO,ICpCIC,EAlBM,WAAO,IAAD,EACaC,oBAAS,GADtB,mBAClBC,EADkB,KACLC,EADK,OAEKF,qBAFL,mBAElBG,EAFkB,KAETC,EAFS,KAezB,OAVAC,oBAAU,WDHH,IAAIC,QAAQ,SAAAC,GACjBC,IAASC,KAAK,CACZC,IALU,+CAMVC,SAAU,SAAAC,GACRL,EAAQK,IAEVC,aAAa,MCFEC,KAAK,SAAAC,GACpBX,EDUoB,SAAAW,GACxB,IAAIC,EAAU,GA4Bd,OA3BAC,OAAOC,OAAOH,GAAMI,QAAQ,SAAAC,GAAQ,IAC1BC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,UACTC,EAASH,EAAI,SAAWE,GAC1BE,EAAS,EACb,OAAQF,GACN,IAAK,aACH,IAAK,IAAIG,EAAI,EAAGA,GAAK,EAAGA,IACtBD,GAAUhC,EAAY4B,EAAI,cAAgBK,IAE5C,MACF,IAAK,SACH,IAAK,IAAIA,EAAI,EAAGA,GAAK,EAAGA,IACtBD,GAAUhC,EAAY4B,EAAI,UAAYK,IAExC,MACF,IAAK,SACH,IAAK,IAAIA,EAAI,EAAGA,GAAK,EAAGA,IACtBD,GAAUhC,EAAY4B,EAAI,UAAYK,IAMvCT,EAAQO,KAASP,EAAQO,GAAU,IACnCP,EAAQO,GAAQF,KAAQL,EAAQO,GAAQF,GAAS,GACtDL,EAAQO,GAAQF,GAASG,IAEpBR,ECvCQU,CAAWX,OAEvB,IACHV,oBAAU,WACRsB,QAAQC,IAAI,yBAA0BzB,GACtCD,GAAe,IACd,CAACC,IAEGF,GAAe,8CCVlBvB,EAAYC,YAAW,SAAAkD,GAAK,MAAK,CACrCC,MAAO,CACLC,SAAU,GAEZC,KAAM,CACJC,UAAW,QACXC,OAAQ,OACRC,aAAc,WAIZN,EAAQ,CACZO,QAAS,CACPC,QAASC,IACTC,UAAWC,KAEbC,OAAQ,CACNC,OAAQ,WAsBGC,EAlBH,WACV,IAAMxD,EAAUT,IAEhB,OACE,kBAACkE,EAAA,EAAD,CAAef,MAAOgB,YAAehB,IACnC,kBAACiB,EAAA,EAAD,CAAQ7D,MAAM,UAAU8D,SAAS,SAASC,UAAW,GACnD,kBAACC,EAAA,EAAD,KACE,wBAAI5D,QAAQ,KAAKJ,MAAM,UAAUG,UAAWD,EAAQ2C,MAAOoB,cAAY,UAAvE,uCAKJ,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIjE,UAAWD,EAAQ6C,MAAM,kBAAC,EAAD,OAC5C,kBAAC,EAAD,QC9BcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC,iB","file":"static/js/main.21998200.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  footer: {\r\n    borderTop: `0.0625rem solid rgba(0,0,0,.1)`,\r\n    padding: '1em 0',\r\n    textAlign: 'center',\r\n    backgroundColor: '#212121',\r\n    color: '#E0E0E0',\r\n  },\r\n});\r\n\r\nconst Footer = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <footer className={classes.footer}>\r\n      <h6 variant=\"body1\">\r\n        &copy;&nbsp;\r\n        {new Date().getFullYear()}\r\n        &nbsp;\r\n        ?\r\n      </h6>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","import Tabletop from \"tabletop\";\r\n\r\nconst sheetId = \"18mN2sOgJ2xywXhx0oYzFbeSsB9rok35eQQWHheokCDg\";\r\n\r\nexport const getSpreadsheet = () => {\r\n  return new Promise(resolve => {\r\n    Tabletop.init({\r\n      key: sheetId,\r\n      callback: googleData => {\r\n        resolve(googleData);\r\n      },\r\n      simpleSheet: true\r\n    });\r\n  });\r\n};\r\n\r\n// TODO: Validar que el row venga de un juez autorizado\r\n// TODO: Promediar las evaluaciones de cada juez por cada ronda\r\n// TODO: Agregar un campo de Total de todas las rondas para cada equipo\r\n// Basicamente, esta funcion no está aportando casi nada útil\r\nexport const getTotales = rows => {\r\n  let equipos = {};\r\n  Object.values(rows).forEach(row => {\r\n    const { ronda, categoria } = row;\r\n    const equipo = row[\"equipo\" + categoria];\r\n    let puntos = 0;\r\n    switch (categoria) {\r\n      case \"Elementary\":\r\n        for (let i = 1; i <= 5; i++) {\r\n          puntos += sacarPuntos(row[\"elementary0\" + i]);\r\n        }\r\n        break;\r\n      case \"Junior\":\r\n        for (let i = 1; i <= 3; i++) {\r\n          puntos += sacarPuntos(row[\"junior0\" + i]);\r\n        }\r\n        break;\r\n      case \"Senior\":\r\n        for (let i = 1; i <= 5; i++) {\r\n          puntos += sacarPuntos(row[\"senior0\" + i]);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (!equipos[equipo]) equipos[equipo] = {};\r\n    if (!equipos[equipo][ronda]) equipos[equipo][ronda] = 0;\r\n    equipos[equipo][ronda] = puntos;\r\n  });\r\n  return equipos;\r\n};\r\n\r\nconst sacarPuntos = value => {\r\n  try {\r\n    const number = parseInt(value.split(\"(\")[1].split(\" \")[0]);\r\n    return isNaN(number) ? 0 : number;\r\n  } catch (err) {\r\n    return 0;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getSpreadsheet, getTotales } from '../utils/scoreboard';\r\n\r\nconst TablaTotales = () => {\r\n  const [sheetLoaded, setSheetLoaded] = useState(false);\r\n  const [totales, setTotales] = useState();\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => {\r\n    getSpreadsheet().then(rows => {\r\n      setTotales(getTotales(rows));\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log('Puntuaciones totales: ', totales);\r\n    setSheetLoaded(true);\r\n  }, [totales]);\r\n\r\n  return sheetLoaded && <p>Vea la consola</p>;\r\n};\r\n\r\nexport default TablaTotales;\r\n","import React from 'react';\r\nimport { AppBar, Grid, Toolbar } from '@material-ui/core';\r\nimport { makeStyles, ThemeProvider } from '@material-ui/styles';\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\nimport { lime, lightBlue } from '@material-ui/core/colors';\r\nimport Footer from './components/Footer';\r\nimport TablaTotales from './components/TablaTotales';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  root: {\r\n    minHeight: '100vh',\r\n    margin: 'auto',\r\n    marginBottom: '4rem',\r\n  },\r\n}));\r\n\r\nconst theme = {\r\n  palette: {\r\n    primary: lime,\r\n    secondary: lightBlue,\r\n  },\r\n  status: {\r\n    danger: 'orange',\r\n  },\r\n};\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ThemeProvider theme={createMuiTheme(theme)}>\r\n      <AppBar color=\"primary\" position=\"sticky\" elevation={0}>\r\n        <Toolbar>\r\n          <h3 variant=\"h6\" color=\"inherit\" className={classes.title} data-testid=\"header\">\r\n            Olimpiada Nacional de Robótica\r\n          </h3>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid item xs={12} className={classes.root}><TablaTotales /></Grid>\r\n      <Footer />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}